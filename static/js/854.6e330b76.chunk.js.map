{"version":3,"file":"static/js/854.6e330b76.chunk.js","mappings":"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","sources":["features/Layout/Layout.tsx","features/Utils/utils.ts","features/Post/Gallery.tsx","features/Post/PostContent.tsx","features/Posts/ShareButton.tsx","features/Utils/WithLoading.tsx","features/Post/FeaturedSubreddits.tsx","features/AuthorPage/AboutAuthor.tsx","features/AuthorPage/AuthorPage.tsx","features/Navigation/Navigation.tsx","features/Posts/Posts.tsx","features/Home/Home.tsx","features/Post/AboutSubreddit.tsx","features/Post/Comments.tsx","features/Post/Post.tsx","features/Search/Search.tsx","features/Subreddit/Subreddit.tsx","Root.tsx"],"sourcesContent":["import MuiAppBar, { AppBarProps as MuiAppBarProps } from \"@mui/material/AppBar\"\nimport { styled } from \"@mui/material/styles\"\n\nconst drawerWidth = 240\n\nconst Main = styled(\"main\", { shouldForwardProp: (prop) => prop !== \"open\" })<{\n  open?: boolean\n}>(({ theme, open }) => ({\n  flexGrow: 1,\n  padding: theme.spacing(3),\n  transition: theme.transitions.create(\"margin\", {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen\n  }),\n  marginRight: -drawerWidth,\n  ...(open && {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: 0\n  })\n}))\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean\n}\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\"\n})<AppBarProps>(({ theme, open }) => ({\n  backgroundColor: theme.palette.background.default,\n  transition: theme.transitions.create([\"margin\", \"width\"], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen\n  }),\n  ...(open && {\n    width: `calc(100% - ${drawerWidth}px)`,\n    backgroundColor: theme.palette.background.default,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: drawerWidth\n  })\n}))\n\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: \"flex-start\"\n}))\n\nexport { AppBar, DrawerHeader, Main }\n","import { SerializedError } from \"@reduxjs/toolkit\"\nimport { FetchBaseQueryError } from \"@reduxjs/toolkit/dist/query\"\n\ninterface Post {\n  id: number\n  title: string\n  tags: any[]\n  image: string\n}\n\nconst posts: Post[] = [\n  {\n    id: 0,\n    title: \"Funny\",\n    tags: [\"new\"],\n    image:\n      \"https://media.istockphoto.com/id/1322277517/photo/wild-grass-in-the-mountains-at-sunset.jpg?s=612x612&w=0&k=20&c=6mItwwFFGqKNKEAzv0mv6TaxhLN3zSE43bWmFN--J5w=\"\n  },\n  {\n    id: 1,\n    title: \"Auto\",\n    tags: [\"hot\"],\n    image:\n      \"https://media.gettyimages.com/id/157373207/photo/balanced-stones-on-a-pebble-beach-during-sunset.jpg?s=612x612&w=gi&k=20&c=o2EIbVkoOYim9J_rHm0YUic16Sl42MuKgS9GOOH6_xU=\"\n  },\n  {\n    id: 2,\n    title: \"Nails\",\n    tags: [\"new\"],\n    image:\n      \"https://imgv3.fotor.com/images/blog-cover-image/part-blurry-image.jpg\"\n  },\n  {\n    id: 3,\n    title: \"News\",\n    tags: [\"best\", \"hot\", \"new\"],\n    image:\n      \"https://www.simplilearn.com/ice9/free_resources_article_thumb/what_is_image_Processing.jpg\"\n  },\n  {\n    id: 4,\n    title: \"Popular\",\n    tags: [\"best\", \"hot\", \"new\"],\n    image:\n      \"https://cdn.searchenginejournal.com/wp-content/uploads/2022/06/image-search-1600-x-840-px-62c6dc4ff1eee-sej.png\"\n  }\n]\n\nexport const extractPartUrl = (url: string) => {\n  // Extracting the domain (e.g., \"www.example.com\")\n  const domainMatch = url.match(\n    /^(?:https?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:/\\n]+)/i\n  )\n  const domain = domainMatch ? domainMatch[1] : \"\"\n\n  return `${domain} ...`\n}\n\nexport const formatTimeAgo = (dateUtc: number) => {\n  const now = new Date() // Current date and time\n  const createdUtcTimestamp = dateUtc * 1000 // Convert to milliseconds\n  const date = new Date(createdUtcTimestamp) // Convert the UTC date to a Date object\n\n  const secondsAgo = Math.floor((now.getTime() - date.getTime()) / 1000)\n\n  if (secondsAgo < 60) {\n    return `${secondsAgo} seconds ago`\n  } else if (secondsAgo < 3600) {\n    const minutesAgo = Math.floor(secondsAgo / 60)\n\n    return `${minutesAgo} minute${minutesAgo > 1 ? \"s\" : \"\"} ago`\n  } else if (secondsAgo < 86400) {\n    const hoursAgo = Math.floor(secondsAgo / 3600)\n\n    return `${hoursAgo} hour${hoursAgo > 1 ? \"s\" : \"\"} ago`\n  } else {\n    const daysAgo = Math.floor(secondsAgo / 86400)\n\n    // Calculate years and months\n    const yearsAgo = Math.floor(daysAgo / 365)\n    const monthsAgo = Math.floor((daysAgo % 365) / 30) // Roughly 30 days per month\n\n    if (yearsAgo > 0) {\n      return `${yearsAgo} year${yearsAgo > 1 ? \"s\" : \"\"} ago`\n    } else if (monthsAgo > 0) {\n      return `${monthsAgo} month${monthsAgo > 1 ? \"s\" : \"\"} ago`\n    } else {\n      return `${daysAgo} day${daysAgo > 1 ? \"s\" : \"\"} ago`\n    }\n  }\n}\n\nexport const formatTime = (dateUtc: number) => {\n  const createdUtcTimestamp = dateUtc * 1000 // Convert to milliseconds\n  const formattedDate = new Date(createdUtcTimestamp).toLocaleDateString(\n    \"en-US\",\n    {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    }\n  )\n\n  return formattedDate\n}\n\nexport const formatNumber = (value: number | undefined): string => {\n  if (value === undefined || value === null) {\n    return \"vote\" // Or any other default value you prefer\n  }\n\n  if (value >= 1000000) {\n    return (value / 1000000).toFixed(1) + \"m\" // Format as million\n  }\n\n  if (value >= 1000) {\n    return (value / 1000).toFixed(1) + \"k\" // Format as thousand\n  }\n\n  return value.toString() // No formatting needed for smaller numbers\n}\n\nexport default posts\n\nexport const parseErrorMessage = (\n  error: FetchBaseQueryError | SerializedError | undefined\n) => {\n  let errorMessage = \"\"\n\n  if (error) {\n    const fetchBaseQueryError = error as FetchBaseQueryError\n\n    if (fetchBaseQueryError.status) {\n      if (typeof fetchBaseQueryError.status === \"number\") {\n        errorMessage = \"Unknown Error\"\n      } else {\n        errorMessage = fetchBaseQueryError.error\n      }\n    } else {\n      errorMessage = (error as SerializedError).message ?? \"Serialized Error\"\n    }\n  }\n\n  return errorMessage\n}\n","import NavigateBeforeRoundedIcon from \"@mui/icons-material/NavigateBeforeRounded\"\nimport NavigateNextRoundedIcon from \"@mui/icons-material/NavigateNextRounded\"\nimport { Box } from \"@mui/material\"\nimport { useTheme } from \"@mui/material/styles\"\nimport React, { useState } from \"react\"\n\ninterface Photo {\n  id: string\n  url: string\n  caption?: string\n}\n\ninterface GalleryProps {\n  photos: Photo[]\n}\n\nconst Gallery: React.FC<GalleryProps> = ({ photos }) => {\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const theme = useTheme()\n\n  const goToNextPhoto = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % photos.length)\n  }\n\n  const goToPreviousPhoto = () => {\n    setCurrentIndex(\n      (prevIndex) => (prevIndex - 1 + photos.length) % photos.length\n    )\n  }\n\n  const currentPhotoNumber = currentIndex + 1\n  const totalPhotos = photos.length\n\n  const galleryContainerStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: { xs: theme.spacing(50), md: theme.spacing(100) },\n    width: \"100%\",\n    backgroundColor: theme.palette.background.default,\n    overflow: \"hidden\"\n  }\n\n  const imageContaner = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n\n  const imageStyle = {\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n\n  const navigationButtonContaner = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    height: \"100%\",\n    margin: { xs: \"0.5rem\", sm: \"0.5rem\", md: \"5rem\" }\n  }\n\n  const navigationButtonStyle = {\n    borderRadius: \"50%\",\n    border: \"none\",\n    cursor: \"pointer\",\n    height: { xs: \"20px\", sm: \"30px\", md: \"50px\" },\n    width: { xs: \"20px\", sm: \"30px\", md: \"50px\" }\n  }\n\n  const counterStyle = {\n    fontSize: { xs: \"0.5rem\", sm: \"1rem\", md: \"1.5rem\" },\n    padding: { xs: \"0.3rem\", sm: \"0.3rem\", md: \"0.7rem\" },\n    borderRadius: \"25%\"\n  }\n\n  return (\n    <Box sx={galleryContainerStyle}>\n      <Box sx={navigationButtonContaner}>\n        <Box height=\"48%\" />\n        {currentIndex !== 0 && (\n          <NavigateBeforeRoundedIcon\n            onClick={goToPreviousPhoto}\n            sx={navigationButtonStyle}\n          />\n        )}\n      </Box>\n      <Box sx={imageContaner}>\n        <img alt=\"Gallery\" src={photos[currentIndex].url} style={imageStyle} />\n      </Box>\n      <Box sx={navigationButtonContaner}>\n        <Box height=\"48%\">\n          <Box sx={counterStyle}>{`${currentPhotoNumber}/${totalPhotos}`}</Box>\n        </Box>\n\n        {/* NEXT */}\n        {currentIndex !== totalPhotos - 1 && (\n          <NavigateNextRoundedIcon\n            onClick={goToNextPhoto}\n            sx={navigationButtonStyle}\n          />\n        )}\n      </Box>\n    </Box>\n  )\n}\n\nexport default Gallery\n","import { Box, Stack, Typography } from \"@mui/material\"\nimport CardMedia from \"@mui/material/CardMedia\"\nimport Link from \"@mui/material/Link\"\nimport { useTheme } from \"@mui/material/styles\"\nimport React from \"react\"\nimport { Link as RouterLink } from \"react-router-dom\"\nimport { extractPartUrl, formatTimeAgo } from \"../Utils/utils\"\nimport Gallery from \"./Gallery\"\n\ninterface PostData {\n  id: string\n  title: string\n  author: string\n  created_utc: number\n  subreddit_name_prefixed: string\n  subreddit: string\n  score: number\n  num_comments: number\n  thumbnail: string\n  url: string\n  poll_data?: object\n  permalink: string\n  is_video: boolean\n  upvote_ratio: number\n  post_hint?: string\n  media: {\n    reddit_video: {\n      fallback_url: string\n    }\n  }\n\n  is_self: boolean\n  selftext: string\n\n  is_gallery: boolean\n  gallery_data: {\n    items: Array<{ media_id: string }>\n  }\n}\n\ninterface PostProps {\n  post: PostData\n}\n\nconst PostContent: React.FC<PostProps> = ({ post }) => {\n  const theme = useTheme()\n\n  const styles = {\n    postContaner: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      maxHeight: { xs: theme.spacing(30), md: theme.spacing(80) },\n      overflowY: \"auto\",\n      overflow: \"auto\",\n      minHeight: { xs: \"2rem\", md: \"6rem\" },\n      justifyContent: \"center\",\n      width: \"100%\"\n    },\n\n    externalLink: {\n      fontSize: { xs: \"0.8rem\", md: \"1rem\" },\n      width: { xs: \"100%\" },\n      overflow: \"auto\",\n      overflowY: \"auto\",\n      objectFit: { xs: \"scale-down\" },\n      padding: { xs: \"0.5rem\" }\n    },\n\n    image: {\n      maxHeight: \"100%\",\n      overflow: \"auto\",\n      objectFit: \"scale-down\",\n      maxWidth: \"100%\"\n    },\n\n    media: {\n      height: theme.spacing(100),\n      width: \"100%\",\n      overflow: \"auto\",\n      maxWidth: \"100%\",\n      maxHeight: \"100%\"\n    },\n\n    textContaner: {\n      fontSize: { xs: \"0.8rem\", md: \"1rem\" },\n      paddingLeft: { xs: theme.spacing(1), md: theme.spacing(2) },\n      paddingRight: { xs: theme.spacing(1), md: theme.spacing(2) },\n      paddingBottom: { xs: theme.spacing(1), md: theme.spacing(2) },\n      overflowY: \"auto\",\n      overflow: \"auto\",\n      overflowWrap: \"break-word\",\n      maxWidth: \"100%\",\n      maxHeight: \"100%\"\n    },\n\n    autorAndSubreddit: {\n      alignItems: { md: \"center\" },\n      flexDirection: { xs: \"column\", md: \"row\" },\n      spacing: \"1\",\n      width: \"100%\"\n    },\n\n    titlePostTypography: {\n      color: theme.palette.primary.main,\n      overflow: \"auto\",\n      overflowWrap: \"break-word\",\n      textDecoration: \"none\",\n      marginBottom: { xs: theme.spacing(1), md: theme.spacing(2) },\n      marginTop: { xs: theme.spacing(0.2), md: theme.spacing(1) },\n      width: \"100%\",\n      fontSize: { xs: \"1rem\", md: \"1.5rem\" }\n    },\n\n    typography: {\n      display: { xs: \"none\", md: \"block\" },\n      color: theme.palette.primary.light,\n      fontSize: { xs: \"0.7rem\", md: \"0.9rem\" },\n      paddingRight: { xs: \"0.5rem\" }\n    },\n\n    subredditAndAuthorTypography: {\n      color: theme.palette.primary.main,\n      fontSize: { xs: \"0.8rem\", md: \"1rem\" },\n      paddingRight: { xs: \"0.5rem\" }\n    }\n  }\n\n  if (!post) {\n    return null\n  }\n\n  return (\n    <Stack direction=\"column\" margin=\"0px\" width=\"100%\">\n      <Stack\n        paddingLeft={{ xs: theme.spacing(1), md: theme.spacing(2) }}\n        paddingRight={{ xs: theme.spacing(1), md: theme.spacing(2) }}\n        paddingTop={{ xs: theme.spacing(1), md: theme.spacing(2) }}\n      >\n        <Stack sx={styles.autorAndSubreddit}>\n          <Stack alignItems=\"center\" direction=\"row\">\n            <RouterLink\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n              to={`/r/${post.subreddit}`}\n            >\n              <Box sx={styles.subredditAndAuthorTypography}>\n                <strong>{post.subreddit_name_prefixed}</strong>\n              </Box>\n            </RouterLink>\n\n            <Typography sx={styles.typography}>Posted by</Typography>\n\n            <RouterLink\n              style={{ textDecoration: \"none\", color: \"inherit\" }}\n              to={`/user/${post.author}`}\n            >\n              <Typography sx={styles.subredditAndAuthorTypography}>\n                {post.author}\n              </Typography>\n            </RouterLink>\n            <Typography sx={styles.typography}>\n              {formatTimeAgo(post.created_utc)}\n            </Typography>\n          </Stack>\n        </Stack>\n        {/* POST TITLE */}\n        <RouterLink\n          style={{ textDecoration: \"none\" }}\n          to={`/r/${post.subreddit}/comments/${post.id}`}\n        >\n          <Typography sx={styles.titlePostTypography}>\n            <strong>{post.title}</strong>\n          </Typography>\n        </RouterLink>\n      </Stack>\n      {/* VIDEO */}\n      {post.is_video && (\n        <Box sx={styles.postContaner}>\n          <Stack alignItems=\"center\" overflow=\"auto\" width=\"100%\">\n            <video autoPlay controls style={styles.media}>\n              <source\n                src={post.media.reddit_video.fallback_url}\n                type=\"video/mp4\"\n              />\n            </video>\n          </Stack>\n        </Box>\n      )}\n\n      {/* IMAGE */}\n      {post.post_hint === \"image\" && (\n        <Box sx={styles.postContaner}>\n          <CardMedia\n            alt={post.title}\n            component=\"img\"\n            src={post.url}\n            sx={styles.image}\n          />\n        </Box>\n      )}\n\n      {/* POLL */}\n      {post.poll_data && <Box />}\n\n      {/* GALLERY */}\n      {post.is_gallery &&\n        post.gallery_data &&\n        post.gallery_data.items.length > 0 &&\n        post.gallery_data.items && (\n          <Box sx={styles.postContaner}>\n            <Gallery\n              photos={post.gallery_data.items.map((item) => ({\n                id: item.media_id,\n                url: `https://i.redd.it/${item.media_id}.jpg`\n              }))}\n            />\n          </Box>\n        )}\n\n      {/* TEXT */}\n      {post.is_self && (\n        <Stack>\n          <Typography sx={styles.textContaner}>{post.selftext}</Typography>\n        </Stack>\n      )}\n      {/* LINK */}\n      {post.post_hint === \"link\" && (\n        <Stack\n          flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n          justifyContent=\"space-between\"\n          paddingBottom=\"1rem\"\n          paddingLeft=\"2rem\"\n          width=\"100%\"\n        >\n          <Link\n            href={post.url}\n            rel=\"noopener\"\n            sx={styles.externalLink}\n            target=\"_blank\"\n          >\n            {extractPartUrl(post.url)}\n          </Link>\n          {post.thumbnail !== \"default\" && (\n            <Stack\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              marginTop={{ xs: \"0.5rem\" }}\n              width={{ xs: \"100%\", sm: \"50%\" }}\n            >\n              <CardMedia\n                alt={post.title}\n                component=\"img\"\n                src={post.thumbnail}\n                sx={{\n                  height: \"100%\",\n                  overflow: \"auto\",\n                  width: { xs: \"60%\", sm: \"40%\" }\n                }}\n              />\n            </Stack>\n          )}\n        </Stack>\n      )}\n    </Stack>\n  )\n}\n\nexport default PostContent\n","import ShareOutlinedIcon from \"@mui/icons-material/ShareOutlined\"\nimport { IconButton, Tooltip, Typography } from \"@mui/material\"\nimport { useTheme } from \"@mui/material/styles\"\nimport React from \"react\"\n\ninterface ShareButtonProps {\n  link: string\n}\n\nconst ShareButton: React.FC<ShareButtonProps> = ({ link }) => {\n  const theme = useTheme()\n\n  const handleCopyLink = () => {\n    const postURL = `https://www.reddit.com${link}`\n\n    navigator.clipboard.writeText(postURL).catch((error) => {\n      console.error(\"Failed to copy link: \", error)\n    })\n  }\n\n  return (\n    <Tooltip placement=\"right\" title=\"Copy\">\n      <IconButton\n        onClick={handleCopyLink}\n        size=\"small\"\n        sx={{\n          borderRadius: \"4px\",\n          marginLeft: \"0.4rem\",\n          color: theme.palette.primary.light\n        }}\n      >\n        <ShareOutlinedIcon />\n        <Typography\n          fontSize={{ xs: \"0.8rem\", md: \"0.9rem\" }}\n          marginLeft=\"0.4rem\"\n        >\n          Share\n        </Typography>\n      </IconButton>\n    </Tooltip>\n  )\n}\n\nexport default ShareButton\n","import { Box, Button, CircularProgress, Stack, Typography } from \"@mui/material\"\nimport { SerializedError } from \"@reduxjs/toolkit\"\nimport { FetchBaseQueryError } from \"@reduxjs/toolkit/dist/query\"\nimport { FC, PropsWithChildren } from \"react\"\nimport { parseErrorMessage } from \"./utils\"\n\ninterface WithLoadingProps {\n  error: FetchBaseQueryError | SerializedError | undefined\n  isFetching: boolean\n  onRetry: () => void\n}\n\nconst WithLoading: FC<PropsWithChildren<WithLoadingProps>> = ({\n  error,\n  isFetching,\n  onRetry,\n  children\n}) => {\n  const errorMessage = parseErrorMessage(error)\n\n  if (isFetching) {\n    return (\n      <Box\n        alignItems=\"center\" // Center vertically\n        display=\"flex\"\n        height=\"100vh\" // 100% of the viewport height\n        justifyContent=\"center\"\n        left=\"0\"\n        padding=\"0px\"\n        top=\"0\"\n        width=\"100%\"\n      >\n        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n          <CircularProgress size=\"1rem\" />\n          <Typography variant=\"h6\">Loading...</Typography>\n        </Stack>\n      </Box>\n    )\n  }\n\n  if (error) {\n    return (\n      <Stack\n        alignItems=\"center\"\n        height=\"100vh\" // 100% of the viewport height\n        justifyContent=\"center\" // Center horizontally\n        left=\"0\"\n        padding=\"0px\"\n        position=\"fixed\"\n        top=\"0\"\n        width=\"100vw\"\n      >\n        <p>Error: {errorMessage}</p>\n        <Button onClick={onRetry}>Retry</Button>\n      </Stack>\n    )\n  }\n\n  return <>{children}</>\n}\n\nexport default WithLoading\n","// import Box from \"@mui/material/Box\"\nimport { Avatar } from \"@mui/material\"\nimport Box from \"@mui/material/Box\"\nimport List from \"@mui/material/List\"\nimport ListItem from \"@mui/material/ListItem\"\nimport ListItemButton from \"@mui/material/ListItemButton\"\nimport ListItemIcon from \"@mui/material/ListItemIcon\"\nimport ListItemText from \"@mui/material/ListItemText\"\nimport { Link as RouterLink } from \"react-router-dom\"\n\nexport default function BasicList() {\n  return (\n    <Box>\n      <nav aria-label=\"main\">\n        <List>\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/askreddit\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://b.thumbs.redditmedia.com/LSHrisQApf1H5F8nWShTx3_KjTOMc3R_ss3kx3XAyXQ.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"AskReddit\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/javascript\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://a.thumbs.redditmedia.com/zDOFJTXd6fmlD58VDGypiV94Leflz11woxmgbGY6p_4.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"JavaScript\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/github\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://b.thumbs.redditmedia.com/AltCa25flSy96k0VDTcXUseNPu25FWaInEl1LOvkbqs.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"GitHub\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/ChatGPT\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://b.thumbs.redditmedia.com/cWRMZxSh_E3NBa5dfAIWqjy_-qKWxYzs422l79Aj7HI.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"Chat GPT\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/ProgrammerHumor\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://b.thumbs.redditmedia.com/DI5tO-0DYsiHrXIn7lPGbtYWVxosoTsUsHtXrzSWGgI.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"ProgrammerHumor\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/react\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://styles.redditmedia.com/t5_2su6s/styles/communityIcon_4g1uo0kd87c61.png?width=256&s=3f7493995143d3cf40b1fedc582607cea194b579\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"React\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/node\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://b.thumbs.redditmedia.com/8RJ1zsSxLbTrSrRAhziwMynfkWVcuFNMXPsLqtGct1o.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"Node\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n\n          <RouterLink\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\n            to=\"/r/developer\"\n          >\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  <Avatar\n                    alt=\"avatar of subreddit\"\n                    src=\"https://b.thumbs.redditmedia.com/D5Q0dxByu36Ova2tGun4Xcqek5BeLat7Lv8D8oAsnWQ.png\"\n                    sx={{ width: 35, height: 35 }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary=\"Developer\" />\n              </ListItemButton>\n            </ListItem>\n          </RouterLink>\n        </List>\n      </nav>\n    </Box>\n  )\n}\n","import CakeOutlinedIcon from \"@mui/icons-material/CakeOutlined\"\nimport StarBorderOutlinedIcon from \"@mui/icons-material/StarBorderOutlined\"\nimport { Avatar, Box, Divider, Paper, Stack, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useGetAuthorInfoQuery } from \"../../api/apiSlice\"\nimport BasicList from \"../Post/FeaturedSubreddits\"\nimport WithLoading from \"../Utils/WithLoading\"\nimport { formatNumber, formatTime } from \"../Utils/utils\"\n\nconst AboutSubreddit: React.FC = () => {\n  const { author = \"\" } = useParams<{ author?: string }>()\n\n  const { data, error, isFetching, refetch } = useGetAuthorInfoQuery(author)\n\n  const styles = {\n    sideBarContaner: {\n      marginLeft: { xs: \"0rem\", md: \"1rem\" }\n    }\n  }\n\n  const authorData = data?.data\n\n  return (\n    <WithLoading error={error} isFetching={isFetching} onRetry={refetch}>\n      <Stack sx={styles.sideBarContaner}>\n        <Paper\n          elevation={3}\n          sx={{\n            width: { xs: \"100%\", md: \"20rem\" },\n            marginBottom: { xs: \"0.5rem\", sm: \"0.5rem\", md: \"1rem\" }\n          }}\n        >\n          {authorData ? (\n            <Stack direction=\"column\">\n              <Box\n                style={{\n                  padding: \"1rem\"\n                }}\n              >\n                <Typography variant=\"h6\">About Author</Typography>\n              </Box>\n              <Divider />\n              <Stack paddingLeft=\"1rem\" paddingRight=\"1rem\" paddingTop=\"1rem\">\n                <Stack\n                  alignItems=\"center\"\n                  direction=\"row\"\n                  marginBottom=\"2rem\"\n                  spacing=\"1rem\"\n                >\n                  {authorData.icon_img ? (\n                    <Avatar\n                      alt=\"avatar of subreddit\"\n                      src={authorData.icon_img}\n                      sx={{ width: 50, height: 50 }}\n                    />\n                  ) : null}\n\n                  <Typography variant=\"h6\">\n                    <strong>{authorData.name}</strong>\n                  </Typography>\n                </Stack>\n                <Divider />\n                <Stack\n                  direction=\"row\"\n                  justifyContent=\"space-between\"\n                  margin=\"0.5rem\"\n                >\n                  <Stack\n                    alignItems=\"center\"\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                  >\n                    <Stack alignItems=\"center\" direction=\"row\" flexWrap=\"wrap\">\n                      <StarBorderOutlinedIcon />\n                      <Typography marginLeft=\"0.2rem\">\n                        <strong>Karma</strong>\n                      </Typography>\n                    </Stack>\n                    <Typography fontSize=\"0.9rem\">\n                      {formatNumber(authorData.total_karma)}\n                    </Typography>\n                  </Stack>\n                  <Stack alignItems=\"center\" direction=\"column\">\n                    <Stack alignItems=\"center\" direction=\"row\" flexWrap=\"wrap\">\n                      <CakeOutlinedIcon />\n                      <Typography marginLeft=\"0.2rem\">\n                        <strong>Cake day</strong>\n                      </Typography>\n                    </Stack>\n                    <Typography fontSize=\"0.9rem\">\n                      {formatTime(authorData.created_utc)}\n                    </Typography>\n                  </Stack>\n                </Stack>\n              </Stack>\n            </Stack>\n          ) : (\n            <Typography>Loading subreddit data...</Typography>\n          )}\n        </Paper>\n        <Box display={{ xs: \"none\", md: \"block\" }}>\n          <Paper\n            elevation={3}\n            sx={{\n              width: \"20rem\",\n              maxWidth: 360,\n              marginBottom: \"1rem\"\n            }}\n          >\n            <BasicList />\n          </Paper>\n        </Box>\n      </Stack>\n    </WithLoading>\n  )\n}\n\nexport default AboutSubreddit\n","import ModeCommentOutlinedIcon from \"@mui/icons-material/ModeCommentOutlined\"\nimport SpeakerNotesOffOutlinedIcon from \"@mui/icons-material/SpeakerNotesOffOutlined\"\nimport {\n  Box,\n  ButtonGroup,\n  Divider,\n  IconButton,\n  Paper,\n  Stack,\n  Typography,\n  useTheme\n} from \"@mui/material\"\nimport React from \"react\"\nimport { Link as RouterLink, useParams } from \"react-router-dom\"\nimport { useGetPostsByAuthorQuery } from \"../../api/apiSlice\"\nimport PostContent from \"../Post/PostContent\"\nimport ShareButton from \"../Posts/ShareButton\"\nimport WithLoading from \"../Utils/WithLoading\"\nimport { formatNumber } from \"../Utils/utils\"\nimport AboutAuthor from \"./AboutAuthor\"\n\ninterface PostData {\n  data: {\n    id: string\n    title: string\n    author: string\n    created_utc: number\n    subreddit_name_prefixed: string\n    subreddit: string\n    score: number\n    num_comments: number\n    thumbnail: string\n    url: string\n    upvote_ratio: number\n    permalink: string\n    is_video: boolean\n    post_hint?: string\n    media: {\n      reddit_video: {\n        fallback_url: string\n      }\n    }\n\n    is_self: boolean\n    selftext: string\n\n    is_gallery: boolean\n    gallery_data: {\n      items: Array<{ media_id: string }>\n    }\n  }\n}\n\nconst AuthorPage: React.FC = () => {\n  const theme = useTheme()\n  const { author = \"\" } = useParams<{ author?: string }>()\n\n  const { data, error, isFetching, refetch } = useGetPostsByAuthorQuery(author)\n\n  const styles = {\n    postContaner: {\n      display: \"flex\",\n      borderLeft: \"1px solid lightgray\",\n      alignItems: \"center\",\n      paddingRight: { xs: \"0.2rem\", md: \"0.5rem\" },\n      overflowY: \"hidden\",\n      maxHeight: \"100%\",\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"auto\"\n    },\n\n    noPostsContainer: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      paddingTop: \"2.5rem\",\n      minHeight: \"5rem\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n\n    mainContaner: {\n      flexDirection: { xs: \"column\", sm: \"column\", md: \"row\" },\n      width: { xs: \"100%\", md: \"90%\" }\n    },\n\n    postMainContaner: {\n      marginTop: \"auto\",\n      height: \"auto\",\n      \"&:hover\": {\n        boxShadow: \"0.5px 2px 2px gray\"\n      }\n    },\n\n    postWrapper: {\n      display: \"flex\",\n      height: \"100%\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: \"0rem\",\n      marginBottom: { xs: theme.spacing(1), md: theme.spacing(2) }\n    },\n\n    vote: {\n      width: { xs: \"15%\", md: \"10%\" },\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-start\",\n      alignItems: \"center\",\n      color: theme.palette.primary.main,\n      marginTop: theme.spacing(2)\n    },\n\n    postFooter: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      margin: \"0.5rem\"\n    },\n\n    aboutAutorContaner: {\n      marginRight: { xs: \"0rem\", md: \"1rem\" },\n      display: { xs: \"block\", sx: \"block\", md: \"inline\" }\n    }\n  }\n\n  const userData = data?.data.children || []\n\n  return (\n    <WithLoading error={error} isFetching={isFetching} onRetry={refetch}>\n      <Stack alignItems=\"center\" padding={{ xs: \"0.5rem\", sm: \"0rem\" }}>\n        <Stack sx={styles.mainContaner}>\n          <Stack sx={styles.aboutAutorContaner}>\n            <AboutAuthor />\n          </Stack>\n          <Box>\n            {userData.length === 0 ? (\n              <Box sx={styles.noPostsContainer}>\n                <SpeakerNotesOffOutlinedIcon />\n                <Typography marginRight=\"1rem\"> No Posts Yet</Typography>\n              </Box>\n            ) : (\n              userData.map((post: PostData) => (\n                <Paper\n                  elevation={3}\n                  key={post.data.id}\n                  sx={styles.postMainContaner}\n                >\n                  <Box sx={styles.postWrapper}>\n                    <Box sx={styles.vote}>\n                      <strong>{formatNumber(post.data.score)}</strong>\n                    </Box>\n                    <Box sx={styles.postContaner}>\n                      <Stack width=\"100%\">\n                        <Stack alignItems=\"center\">\n                          <PostContent post={post.data} />\n                        </Stack>\n                        <Divider />\n\n                        <Box sx={styles.postFooter}>\n                          <ButtonGroup aria-label=\"outlined primary button group\">\n                            <RouterLink\n                              to={`/r/${post.data.subreddit}/comments/${post.data.id}`}\n                            >\n                              <IconButton\n                                size=\"small\"\n                                sx={{\n                                  borderRadius: \"4px\",\n                                  marginLeft: \"0.4rem\",\n                                  color: theme.palette.primary.light\n                                }}\n                              >\n                                <ModeCommentOutlinedIcon />\n                                <Typography\n                                  fontSize=\"0.9rem\"\n                                  marginLeft=\"0.4rem\"\n                                >\n                                  {formatNumber(post.data.num_comments)}\n\n                                  {post.data.num_comments === 1\n                                    ? \" Comment\"\n                                    : \" Comments\"}\n                                </Typography>\n                              </IconButton>\n                            </RouterLink>\n                            <ShareButton link={post.data.permalink} />\n                          </ButtonGroup>\n                        </Box>\n                      </Stack>\n                    </Box>\n                  </Box>\n                </Paper>\n              ))\n            )}\n          </Box>\n        </Stack>\n      </Stack>\n    </WithLoading>\n  )\n}\n\nexport default AuthorPage\n","import { css } from \"@emotion/react\"\nimport AutorenewOutlinedIcon from \"@mui/icons-material/AutorenewOutlined\"\nimport LocalFireDepartmentOutlinedIcon from \"@mui/icons-material/LocalFireDepartmentOutlined\"\nimport StarBorderIcon from \"@mui/icons-material/StarBorder\"\nimport { Button } from \"@mui/material\"\nimport Paper from \"@mui/material/Paper\"\nimport Stack from \"@mui/material/Stack\"\nimport { useTheme } from \"@mui/material/styles\"\nimport { FC, ReactNode } from \"react\"\nimport { NavLink } from \"react-router-dom\"\n\n/** @jsxImportSource @emotion/react */\n\nconst getStyles = () => ({\n  link: css({\n    textDecoration: \"none\"\n  })\n})\n\ninterface TopLinkProps {\n  label: string\n  to: string\n  icon: ReactNode\n}\n\nconst TopLink = ({ label, to, icon }: TopLinkProps) => {\n  const theme = useTheme()\n  const styles = getStyles()\n\n  return (\n    <NavLink css={styles.link} to={to}>\n      {({ isActive }) => (\n        <Button\n          size=\"small\"\n          startIcon={icon}\n          sx={{\n            borderRadius: 10,\n            backgroundColor: isActive\n              ? theme.palette.background.default\n              : theme.palette.background.paper,\n            color: isActive\n              ? theme.palette.secondary.main\n              : theme.palette.primary.main\n          }}\n          variant=\"outlined\"\n        >\n          {label}\n        </Button>\n      )}\n    </NavLink>\n  )\n}\n\nconst Navigation: FC = () => {\n  const styles = {\n    navContainer: {\n      p: { xs: \"0.5rem\", sm: \"0.8rem\", md: \"1rem\" },\n      width: { xs: \"100%\", sm: \"100%\", md: \"80%\" },\n      marginBottom: { xs: \"0rem\", sm: \"0.5rem\", md: \"1rem\" }\n    }\n  }\n\n  return (\n    <Paper elevation={3} sx={styles.navContainer}>\n      <Stack\n        direction=\"row\"\n        justifyContent=\"center\"\n        spacing={{ xs: 0.7, sm: 2, md: 4 }}\n        sx={{\n          m: { xs: \"0rem\", md: \"2rem\" }\n        }}\n      >\n        <TopLink icon={<StarBorderIcon />} label=\"Top\" to=\"/all/top\" />\n        <TopLink\n          icon={<LocalFireDepartmentOutlinedIcon />}\n          label=\"Popular\"\n          to=\"/popular\"\n        />\n        <TopLink icon={<AutorenewOutlinedIcon />} label=\"New\" to=\"/all/new\" />\n      </Stack>\n    </Paper>\n  )\n}\n\nexport default Navigation\n","import ModeCommentOutlinedIcon from \"@mui/icons-material/ModeCommentOutlined\"\nimport {\n  Box,\n  ButtonGroup,\n  Divider,\n  IconButton,\n  Paper,\n  Stack,\n  Typography\n} from \"@mui/material\"\nimport { useTheme } from \"@mui/material/styles\"\nimport { FC } from \"react\"\nimport { Link as RouterLink } from \"react-router-dom\"\nimport { useGetPostsBySubredditQuery } from \"../../api/apiSlice\"\nimport PostContent from \"../Post/PostContent\"\nimport WithLoading from \"../Utils/WithLoading\"\nimport { formatNumber } from \"../Utils/utils\"\nimport ShareButton from \"./ShareButton\"\n\ninterface PostsProps {\n  subreddit: string\n}\n\ninterface PostData {\n  data: {\n    id: string\n    title: string\n    author: string\n    created_utc: number\n    subreddit_name_prefixed: string\n    subreddit: string\n    score: number\n    num_comments: number\n    thumbnail: string\n    url: string\n    upvote_ratio: number\n    permalink: string\n    is_video: boolean\n    post_hint?: string\n    media: {\n      reddit_video: {\n        fallback_url: string\n      }\n    }\n\n    is_self: boolean\n    selftext: string\n\n    is_gallery: boolean\n    gallery_data: {\n      items: Array<{ media_id: string }>\n    }\n  }\n}\n\nconst Posts: FC<PostsProps> = ({ subreddit }) => {\n  const theme = useTheme()\n  const { data, error, isFetching, refetch } =\n    useGetPostsBySubredditQuery(subreddit)\n\n  const styles = {\n    mainContaner: {\n      height: \"auto\",\n      width: \"100%\"\n    },\n\n    postWrapper: {\n      display: \"flex\",\n      height: \"100%\",\n      width: \"100%\",\n\n      overflow: \"auto\",\n      overflowWrap: \"break-word\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      \"&:hover\": {\n        boxShadow: \"0.5px 2px 2px gray\"\n      },\n      marginBottom: { xs: theme.spacing(1), md: theme.spacing(2) }\n    },\n\n    vote: {\n      display: { xs: \"none\", sm: \"flex\", md: \"flex\" },\n      width: { sm: \"15%\", md: \"10%\" },\n      fontSize: { sm: \"0.8rem\", md: \"1rem\" },\n      flexDirection: \"column\",\n      justifyContent: \"flex-start\",\n      alignItems: \"center\",\n      color: theme.palette.primary.main,\n      marginTop: theme.spacing(2)\n    },\n\n    postContaner: {\n      display: \"flex\",\n      alignItems: \"center\",\n      paddingRight: { xs: \"0.2rem\", md: \"0.5rem\" },\n      overflowY: \"hidden\",\n      maxHeight: \"100%\",\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"auto\"\n    },\n\n    postFooter: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      margin: \"0.5rem\"\n    }\n  }\n\n  return (\n    <WithLoading error={error} isFetching={isFetching} onRetry={refetch}>\n      <Stack alignItems=\"center\">\n        <Box\n          sx={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\"\n          }}\n        >\n          {data?.data?.children?.map((post: PostData) => (\n            <Paper elevation={3} key={post.data.id} sx={styles.mainContaner}>\n              <Box sx={styles.postWrapper}>\n                <Box sx={styles.vote}>\n                  <strong>{formatNumber(post.data.score)}</strong>\n                </Box>\n                <Divider flexItem orientation=\"vertical\" />\n                <Box sx={styles.postContaner}>\n                  <Stack width=\"100%\">\n                    <Stack alignItems=\"center\">\n                      <PostContent post={post.data} />\n                    </Stack>\n                    <Divider />\n\n                    <Box sx={styles.postFooter}>\n                      <ButtonGroup aria-label=\"outlined primary button group\">\n                        <RouterLink\n                          to={`/r/${post.data.subreddit}/comments/${post.data.id}`}\n                        >\n                          <IconButton\n                            size=\"small\"\n                            sx={{\n                              borderRadius: \"4px\",\n                              marginLeft: \"0.4rem\",\n                              color: theme.palette.primary.light\n                            }}\n                          >\n                            <ModeCommentOutlinedIcon />\n                            <Typography\n                              fontSize={{ xs: \"0.8rem\", md: \"0.9rem\" }}\n                              marginLeft=\"0.4rem\"\n                            >\n                              {formatNumber(post.data.num_comments)}\n\n                              {post.data.num_comments === 1\n                                ? \" Comment\"\n                                : \" Comments\"}\n                            </Typography>\n                          </IconButton>\n                        </RouterLink>\n                        <ShareButton link={post.data.permalink} />\n                      </ButtonGroup>\n                    </Box>\n                  </Stack>\n                </Box>\n              </Box>\n            </Paper>\n          ))}\n        </Box>\n      </Stack>\n    </WithLoading>\n  )\n}\n\nexport default Posts\n","import Box from \"@mui/material/Box\"\nimport Stack from \"@mui/material/Stack\"\nimport { FC } from \"react\"\nimport { useLocation } from \"react-router-dom\"\nimport Navigation from \"../Navigation/Navigation\"\nimport Posts from \"../Posts/Posts\"\n\nconst Home: FC = () => {\n  const location = useLocation()\n  const subreddit = location.pathname.slice(1)\n\n  return (\n    <Box>\n      <Stack\n        alignItems=\"center\"\n        display={{ xs: \"none\", sm: \"flex\", md: \"flex\" }}\n      >\n        <Navigation />\n        <Stack width={{ sm: \"100%\", md: \"80%\" }}>\n          <Posts subreddit={subreddit} />\n        </Stack>\n      </Stack>\n      <Stack display={{ xs: \"block\", sm: \"none\", md: \"none\" }} width=\"100%\">\n        <Stack\n          height=\"auto\"\n          overflow=\"auto\"\n          paddingBottom=\"3rem\"\n          paddingLeft={{ xs: \"0.5rem\" }}\n          paddingRight={{ xs: \"0.5rem\" }}\n          paddingTop={{ xs: \"0.5rem\" }}\n          width=\"100%\"\n        >\n          <Posts subreddit={subreddit} />\n        </Stack>\n\n        <Stack\n          alignItems=\"center\"\n          bottom=\"0\"\n          position=\"fixed\"\n          width=\"100%\"\n          zIndex=\"tooltip\"\n        >\n          <Navigation />\n        </Stack>\n      </Stack>\n    </Box>\n  )\n}\n\nexport default Home\n","import { Avatar, Box, Divider, Paper, Stack, Typography } from \"@mui/material\"\nimport React from \"react\"\nimport { Link as RouterLink, useParams } from \"react-router-dom\"\nimport { useGetSubredditQuery } from \"../../api/apiSlice\"\nimport WithLoading from \"../Utils/WithLoading\"\nimport { formatNumber, formatTime } from \"../Utils/utils\"\nimport BasicList from \"./FeaturedSubreddits\"\n\nconst AboutSubreddit: React.FC = () => {\n  const { subreddit = \"\" } = useParams<{\n    subreddit?: string\n  }>()\n\n  const { data, error, isFetching, refetch } = useGetSubredditQuery(subreddit)\n\n  const styles = {\n    subredditContaner: {\n      display: { xs: \"none\", md: \"block\" }\n    }\n  }\n\n  const subredditData = data?.data\n\n  return (\n    <WithLoading error={error} isFetching={isFetching} onRetry={refetch}>\n      <Stack>\n        <Paper\n          elevation={3}\n          sx={{\n            width: { xs: \"100%\", md: \"20rem\" },\n            marginBottom: { xs: \"0rem\", sm: \"0.5rem\", md: \"1rem\" }\n          }}\n        >\n          {subredditData ? (\n            <Stack direction=\"column\">\n              <Box\n                style={{\n                  padding: \"1rem\"\n                }}\n              >\n                <Typography variant=\"h6\">About Community</Typography>\n              </Box>\n\n              <Divider />\n              <Stack p=\"1rem\">\n                <Stack\n                  alignItems=\"center\"\n                  direction=\"row\"\n                  marginBottom=\"0.5rem\"\n                  spacing=\"1rem\"\n                >\n                  {subredditData.icon_img ? (\n                    <Avatar\n                      alt=\"avatar of subreddit\"\n                      src={subredditData.icon_img}\n                      sx={{ width: 50, height: 50 }}\n                    />\n                  ) : null}\n\n                  <RouterLink\n                    style={{ textDecoration: \"none\", color: \"inherit\" }}\n                    to={`/r/${subreddit}/`}\n                  >\n                    <Typography>\n                      <strong>{subredditData.display_name_prefixed}</strong>\n                    </Typography>\n                  </RouterLink>\n                </Stack>\n                <Box height=\"auto\" width=\"100%\">\n                  <Typography style={{ overflowWrap: \"break-word\" }}>\n                    {subredditData.public_description}\n                  </Typography>\n                </Box>\n\n                <Typography fontSize=\"0.8rem\" margin=\"0.5rem\">\n                  Created {formatTime(subredditData.created_utc)}\n                </Typography>\n                <Divider />\n                <Stack\n                  direction=\"row\"\n                  justifyContent=\"space-between\"\n                  marginTop=\"0.5rem\"\n                >\n                  <Stack\n                    alignItems=\"center\"\n                    direction=\"column\"\n                    justifyContent=\"center\"\n                  >\n                    <Typography fontSize=\"0.8rem\">Members</Typography>\n                    <strong>{formatNumber(subredditData.subscribers)}</strong>\n                  </Stack>\n                  <Stack alignItems=\"center\" direction=\"column\">\n                    <Typography fontSize=\"0.8rem\">Online</Typography>\n                    <Stack direction=\"row\">\n                      <Typography color=\"green\" paddingRight=\"0.3rem\">\n                        ●\n                      </Typography>\n                      <strong>\n                        {formatNumber(subredditData.accounts_active)}\n                      </strong>\n                    </Stack>\n                  </Stack>\n                </Stack>\n              </Stack>\n            </Stack>\n          ) : (\n            <Typography>Loading subreddit data...</Typography>\n          )}\n        </Paper>\n        <Box sx={styles.subredditContaner}>\n          <Paper\n            elevation={3}\n            sx={{\n              width: { xs: \"100%\", md: \"20rem\" },\n              marginBottom: \"1rem\"\n            }}\n          >\n            <BasicList />\n          </Paper>\n        </Box>\n      </Stack>\n    </WithLoading>\n  )\n}\n\nexport default AboutSubreddit\n","import SpeakerNotesOffOutlinedIcon from \"@mui/icons-material/SpeakerNotesOffOutlined\"\nimport VerticalAlignTopOutlinedIcon from \"@mui/icons-material/VerticalAlignTopOutlined\"\nimport { Box, IconButton, Stack, Typography } from \"@mui/material\"\nimport Divider from \"@mui/material/Divider\"\nimport { useTheme } from \"@mui/material/styles\"\nimport { Link as RouterLink, useParams } from \"react-router-dom\"\nimport { useGetCommentsQuery } from \"../../api/apiSlice\"\nimport ShareButton from \"../Posts/ShareButton\"\nimport WithLoading from \"../Utils/WithLoading\"\nimport { formatNumber, formatTimeAgo } from \"../Utils/utils\"\n\ninterface Comment {\n  data: {\n    id: string\n    body: string\n    author: string\n    permalink: string\n    score: number\n    created_utc: number\n  }\n}\n\nconst Comments: React.FC = () => {\n  const theme = useTheme()\n  const { subreddit = \"\", id = \"\" } = useParams<{\n    subreddit?: string\n    id?: string\n  }>()\n\n  const { data, error, isFetching, refetch } = useGetCommentsQuery({\n    subreddit,\n    id\n  })\n\n  const styles = {\n    noCommentsContainer: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      paddingTop: \"2.5rem\",\n      paddingBottom: \"4rem\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n\n    mainContaner: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n\n    timeAgoTypography: {\n      fontSize: \"0.8rem\",\n      marginLeft: \"0.5rem\"\n    },\n\n    commentTopAndBottomContaner: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      padding: \"0.3rem\",\n      spacing: { xs: theme.spacing(0.5), md: theme.spacing(1) },\n      width: \"100%\"\n    },\n\n    commentContaner: {\n      marginTop: { xs: \"0.5rem\", md: \"0.8rem\" },\n      paddingLeft: { xs: \"1rem\", md: \"1.5rem\" },\n      paddingRight: { xs: \"1rem\", md: \"1.5rem\" },\n\n      \"&:hover\": {\n        boxShadow: \"0.5px 1px 1px gray\"\n      }\n    },\n\n    commentBody: {\n      paddingLeft: \"0.5rem\",\n      paddingRight: \"0.5rem\",\n      overflowWrap: \"break-word\",\n      fontSize: { xs: \"0.8rem\", md: \"0.9rem\" }\n    }\n  }\n\n  return (\n    <WithLoading error={error} isFetching={isFetching} onRetry={refetch}>\n      <Stack alignItems=\"center\" width=\"100%\">\n        <Box\n          sx={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\"\n          }}\n        >\n          <Box sx={styles.mainContaner}>\n            <Divider />\n            <Box\n              marginLeft={{ xs: \"1rem\", md: \"2rem\" }}\n              paddingTop={{ xs: \"1rem\", md: \"1.5rem\" }}\n            >\n              <Typography\n                sx={{\n                  fontSize: { xs: \"1rem\", md: \"1.2rem\" },\n                  color: theme.palette.primary.main\n                }}\n              >\n                Comments\n              </Typography>\n            </Box>\n\n            {data?.[1]?.data?.children?.length === 0 ? (\n              <Box sx={styles.noCommentsContainer}>\n                <SpeakerNotesOffOutlinedIcon />\n                <Typography\n                  sx={{\n                    fontSize: { xs: \"1rem\", md: \"1.2rem\" },\n                    marginLeft: \"1rem\"\n                  }}\n                >\n                  {\" \"}\n                  No Comments Yet\n                </Typography>\n              </Box>\n            ) : (\n              data?.[1]?.data?.children?.map((comment: Comment) => (\n                <Box key={comment.data.id} sx={styles.commentContaner}>\n                  <Stack sx={styles.commentTopAndBottomContaner}>\n                    <RouterLink\n                      style={{ textDecoration: \"none\", color: \"inherit\" }}\n                      to={`/user/${comment.data.author}`}\n                    >\n                      <Typography>\n                        <strong>{comment.data.author}</strong>\n                      </Typography>\n                    </RouterLink>\n\n                    <Typography sx={styles.timeAgoTypography}>\n                      {formatTimeAgo(comment.data.created_utc)}\n                    </Typography>\n                  </Stack>\n\n                  <Typography sx={styles.commentBody}>\n                    {comment.data.body}\n                  </Typography>\n                  <Stack sx={styles.commentTopAndBottomContaner}>\n                    <IconButton\n                      size=\"small\"\n                      sx={{\n                        borderRadius: \"4px\",\n                        marginRight: \"1rem\",\n                        color: theme.palette.primary.light\n                      }}\n                    >\n                      <VerticalAlignTopOutlinedIcon />\n                      <Typography fontSize=\"0.9rem\" marginLeft=\"0.3rem\">\n                        {formatNumber(comment.data.score)}\n                        {comment.data.score === 1 ? \" Upvote\" : \" Upvotes\"}\n                      </Typography>\n                    </IconButton>\n\n                    <ShareButton link={comment.data.permalink} />\n                  </Stack>\n                  <Divider />\n                </Box>\n              ))\n            )}\n          </Box>\n        </Box>\n      </Stack>\n    </WithLoading>\n  )\n}\n\nexport default Comments\n","import { Box, Paper, Stack } from \"@mui/material\"\nimport React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useGetPostByIdQuery } from \"../../api/apiSlice\"\nimport AboutSubreddit from \"./AboutSubreddit\"\nimport Comments from \"./Comments\"\nimport PostContent from \"./PostContent\"\n\nconst Post: React.FC = () => {\n  const { id = \"\" } = useParams<{\n    id?: string\n  }>()\n\n  const { data } = useGetPostByIdQuery(id)\n  const styles = {\n    mainContaner: {\n      flexDirection: { xs: \"column\", sm: \"column\", md: \"row\" },\n      width: { xs: \"100%\", sm: \"100%\", md: \"90%\" }\n    },\n\n    postContaner: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"auto\",\n      alignItems: \"center\"\n    }\n  }\n\n  const post = data?.data?.children?.[0]?.data\n\n  return (\n    <Stack alignItems=\"center\" padding={{ xs: \"0.5rem\", sm: \"0.5rem\" }}>\n      <Stack sx={styles.mainContaner}>\n        <Box\n          marginBottom={{ xs: \"0.5rem\", sx: \"0.8rem\", md: \"1rem\" }}\n          marginRight={{ sx: \"0.8rem\", md: \"1rem\" }}\n        >\n          <AboutSubreddit />\n        </Box>\n        <Paper sx={styles.postContaner}>\n          <PostContent post={post} />\n          <Comments />\n        </Paper>\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default Post\n","import ClearIcon from \"@mui/icons-material/Clear\"\nimport SearchIcon from \"@mui/icons-material/Search\"\nimport { Box, useTheme } from \"@mui/material\"\nimport IconButton from \"@mui/material/IconButton\"\nimport TextField from \"@mui/material/TextField\"\nimport { ChangeEvent, useEffect, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const navigate = useNavigate()\n  const location = useLocation()\n  const theme = useTheme()\n\n  const styles = {\n    mainContaner: {\n      backgroundColor: theme.palette.background.paper\n    }\n  }\n\n  const handleSearch = () => {\n    if (searchTerm) {\n      navigate(`/r/${searchTerm}`)\n    }\n  }\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value)\n  }\n\n  const handleClear = () => {\n    setSearchTerm(\"\")\n  }\n\n  useEffect(() => {\n    const pathSubreddit = location.pathname.split(\"/\")[2]\n\n    if (pathSubreddit === searchTerm) {\n      setSearchTerm(searchTerm)\n    } else {\n      setSearchTerm(\"\")\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname])\n\n  return (\n    <Box sx={styles.mainContaner}>\n      <TextField\n        InputProps={{\n          startAdornment: (\n            <IconButton\n              onClick={handleSearch}\n              size=\"small\"\n              sx={{ cursor: \"pointer\", p: \"0.1rem\" }}\n            >\n              <SearchIcon />\n            </IconButton>\n          ),\n          endAdornment: searchTerm && (\n            <IconButton\n              onClick={handleClear}\n              size=\"small\"\n              sx={{ cursor: \"pointer\" }}\n            >\n              <ClearIcon />\n            </IconButton>\n          )\n        }}\n        fullWidth\n        onChange={handleInputChange}\n        onKeyDown={(e) => e.key === \"Enter\" && handleSearch()}\n        size=\"small\"\n        sx={{ borderRadius: \"1rem\" }}\n        value={searchTerm}\n        variant=\"outlined\"\n      />\n    </Box>\n  )\n}\n\nexport default SearchBar\n","// import { useTheme } from \"@mui/material/styles\"\nimport { Avatar, Box, Paper, Stack, Typography, useTheme } from \"@mui/material\"\nimport React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useGetSubredditQuery } from \"../../api/apiSlice\"\nimport AboutSubreddit from \"../Post/AboutSubreddit\"\nimport Posts from \"../Posts/Posts\"\nimport WithLoading from \"../Utils/WithLoading\"\n\nconst Subreddit: React.FC = () => {\n  const { subreddit = \"\" } = useParams<{ subreddit?: string }>()\n  const theme = useTheme()\n  const { data, error, isFetching, refetch } = useGetSubredditQuery(subreddit)\n\n  const styles = {\n    mainContaner: {\n      flexDirection: { xs: \"column\", sm: \"column\", md: \"row\" },\n      width: { xs: \"100%\", sm: \"100%\", md: \"90%\" }\n    },\n\n    headerContaner: {\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: \"90%\",\n      marginBottom: { xs: theme.spacing(1), md: theme.spacing(2) },\n      display: { xs: \"none\", md: \"block\" }\n    },\n\n    subredditContaner: {\n      marginRight: { xs: \"0rem\", md: \"1rem\" },\n      marginBottom: { xs: \"0.5rem\" }\n    }\n  }\n\n  const dataInfo = data?.data\n\n  return (\n    <WithLoading error={error} isFetching={isFetching} onRetry={refetch}>\n      <Stack alignItems=\"center\" padding={{ xs: \"0.5rem\" }}>\n        {dataInfo ? (\n          <Paper elevation={3} sx={styles.headerContaner}>\n            <Box\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                padding: \"5rem\"\n              }}\n            >\n              <Box>\n                <Stack alignItems=\"center\" direction=\"row\" spacing={3}>\n                  {dataInfo.icon_img ? (\n                    <Avatar\n                      alt=\"Subreddit Icon\"\n                      src={dataInfo.icon_img}\n                      sx={{ width: 100, height: 100 }}\n                    />\n                  ) : null}\n\n                  <Stack>\n                    <Typography variant=\"h4\">\n                      <strong>{dataInfo.title}</strong>\n                    </Typography>\n                    <Typography variant=\"h6\">\n                      {dataInfo.display_name_prefixed}\n                    </Typography>\n                  </Stack>\n                </Stack>\n              </Box>\n            </Box>\n          </Paper>\n        ) : null}\n\n        <Stack sx={styles.mainContaner}>\n          <Stack sx={styles.subredditContaner}>\n            <AboutSubreddit />\n          </Stack>\n          <Posts subreddit={subreddit} />\n        </Stack>\n      </Stack>\n    </WithLoading>\n  )\n}\n\nexport default Subreddit\n","import ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\"\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\"\nimport MenuIcon from \"@mui/icons-material/Menu\"\nimport { Avatar, Stack } from \"@mui/material\"\nimport Box from \"@mui/material/Box\"\nimport CssBaseline from \"@mui/material/CssBaseline\"\nimport Divider from \"@mui/material/Divider\"\nimport Drawer from \"@mui/material/Drawer\"\nimport IconButton from \"@mui/material/IconButton\"\nimport List from \"@mui/material/List\"\nimport ListItem from \"@mui/material/ListItem\"\nimport ListItemButton from \"@mui/material/ListItemButton\"\nimport ListItemIcon from \"@mui/material/ListItemIcon\"\nimport ListItemText from \"@mui/material/ListItemText\"\nimport Toolbar from \"@mui/material/Toolbar\"\nimport Typography from \"@mui/material/Typography\"\nimport { useTheme } from \"@mui/material/styles\"\nimport * as React from \"react\"\nimport { Suspense } from \"react\"\nimport { Link, Navigate, Route, Routes } from \"react-router-dom\"\nimport { AppBar, DrawerHeader, Main } from \"../src/features/Layout/Layout\"\nimport AuthorPage from \"./features/AuthorPage/AuthorPage\"\nimport ErrorPage from \"./features/ErrorPage/ErrorPage\"\nimport Home from \"./features/Home/Home\"\nimport Post from \"./features/Post/Post\"\nimport Search from \"./features/Search/Search\"\nimport Subreddit from \"./features/Subreddit/Subreddit\"\nimport { ThemeSwitcher } from \"./features/Utils/ThemeSwitcher\"\nimport logo from \"./images/logo.png\"\n\nconst drawerWidth = 240\n\nexport default function App() {\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false)\n\n  const handleDrawerOpen = () => {\n    setOpen(true)\n  }\n\n  const handleDrawerClose = () => {\n    setOpen(false)\n  }\n\n  const styles = {\n    mainContaner: {\n      backgroundColor: theme.palette.background.default,\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\",\n      overflowY: \"auto\",\n      padding: { xs: \"0rem\", sm: \"0.8rem\", md: \"1rem\" }\n    },\n\n    logoTypography: {\n      display: {\n        xs: \"none\",\n        sm: \"block\",\n        color: theme.palette.primary.main,\n        marginLeft: theme.spacing(1)\n      }\n    },\n\n    drawer: {\n      width: { xs: \"50%\", md: drawerWidth },\n      flexShrink: 0,\n      \"& .MuiDrawer-paper\": {\n        width: drawerWidth\n      }\n    },\n\n    openDrawerButton: {\n      display: \"block\",\n      ...(open && { display: \"none\" })\n    }\n  }\n\n  return (\n    <Box>\n      <CssBaseline />\n      <AppBar open={open} position=\"fixed\">\n        <Toolbar\n          sx={{\n            display: \"flex\"\n          }}\n        >\n          <Stack alignItems=\"center\" direction=\"row\" marginRight=\"1rem\">\n            <Link to=\"/\">\n              <img alt=\"logo\" height=\"50\" src={logo} width=\"50\" />\n            </Link>\n            <Typography noWrap sx={styles.logoTypography} variant=\"h6\">\n              <strong>Mini</strong>Reddit\n            </Typography>\n          </Stack>\n          <Stack\n            alignItems=\"center\"\n            direction=\"row\"\n            flexGrow=\"1\"\n            justifyContent=\"space-between\"\n          >\n            <Search />\n            <IconButton\n              aria-label=\"open drawer\"\n              edge=\"end\"\n              onClick={handleDrawerOpen}\n              sx={styles.openDrawerButton}\n            >\n              <MenuIcon />\n            </IconButton>\n          </Stack>\n        </Toolbar>\n      </AppBar>\n      <Main open={open} sx={styles.mainContaner}>\n        <DrawerHeader />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Routes>\n            <Route element={<Home />} path=\"/all/top\" />\n            <Route element={<Home />} path=\"/popular\" />\n            <Route element={<Home />} path=\"/all/new\" />\n            <Route element={<Post />} path=\"/r/:subreddit/comments/:id\" />\n            <Route element={<Subreddit />} path=\"/r/:subreddit\" />\n            <Route element={<AuthorPage />} path=\"/user/:author\" />\n            <Route element={<Navigate replace to=\"/all/top\" />} path=\"/\" />\n            <Route element={<ErrorPage />} path=\"*\" />\n          </Routes>\n        </Suspense>\n      </Main>\n      <Drawer\n        anchor=\"right\"\n        open={open}\n        sx={styles.drawer}\n        variant=\"persistent\"\n      >\n        <DrawerHeader>\n          <IconButton\n            data-testid=\"drawer-toggle-button\"\n            onClick={handleDrawerClose}\n          >\n            {theme.direction === \"rtl\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n\n          <Typography marginLeft=\"1rem\">User Settings</Typography>\n        </DrawerHeader>\n        <Divider />\n        <List>\n          <ListItem disablePadding>\n            <ThemeSwitcher />\n          </ListItem>\n\n          <a\n            href=\"https://github.com/alysachok/MiniReddit\"\n            rel=\"noopener noreferrer\"\n            style={{\n              textDecoration: \"none\",\n              color: theme.palette.primary.main\n            }}\n            target=\"_blank\"\n          >\n            <ListItemButton>\n              <ListItemIcon>\n                <Avatar\n                  alt=\"avatar of subreddit\"\n                  src=\"https://b.thumbs.redditmedia.com/AltCa25flSy96k0VDTcXUseNPu25FWaInEl1LOvkbqs.png\"\n                  sx={{ width: 25, height: 25 }}\n                />\n              </ListItemIcon>\n              <ListItemText primary=\"Sourсe Code\" />\n            </ListItemButton>\n          </a>\n          <a\n            href=\"https://www.reddit.com/\"\n            rel=\"noopener noreferrer\"\n            style={{\n              textDecoration: \"none\",\n              color: theme.palette.primary.main\n            }}\n            target=\"_blank\"\n          >\n            <ListItemButton>\n              <ListItemIcon>\n                <Avatar\n                  alt=\"avatar of subreddit\"\n                  src={logo}\n                  sx={{ width: 27, height: 27 }}\n                />\n              </ListItemIcon>\n              <ListItemText primary=\"Visit Reddit\" />\n            </ListItemButton>\n          </a>\n        </List>\n      </Drawer>\n    </Box>\n  )\n}\n"],"names":["Main","styled","shouldForwardProp","prop","_ref","theme","open","flexGrow","padding","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","marginRight","easeOut","enteringScreen","AppBar","MuiAppBar","_ref2","backgroundColor","palette","background","default","width","concat","DrawerHeader","_ref3","display","alignItems","mixins","toolbar","justifyContent","extractPartUrl","url","domainMatch","match","domain","formatTimeAgo","dateUtc","now","Date","date","secondsAgo","Math","floor","getTime","minutesAgo","hoursAgo","daysAgo","yearsAgo","monthsAgo","formatTime","toLocaleDateString","year","month","day","formatNumber","value","undefined","toFixed","toString","photos","currentIndex","setCurrentIndex","useState","useTheme","currentPhotoNumber","totalPhotos","length","galleryContainerStyle","flexDirection","height","xs","md","overflow","navigationButtonContaner","margin","sm","navigationButtonStyle","borderRadius","border","cursor","_jsxs","Box","sx","children","_jsx","NavigateBeforeRoundedIcon","onClick","goToPreviousPhoto","prevIndex","alt","src","style","maxWidth","maxHeight","fontSize","NavigateNextRoundedIcon","goToNextPhoto","post","styles","postContaner","overflowY","minHeight","externalLink","objectFit","image","media","textContaner","paddingLeft","paddingRight","paddingBottom","overflowWrap","autorAndSubreddit","titlePostTypography","color","primary","main","textDecoration","marginBottom","marginTop","typography","light","subredditAndAuthorTypography","Stack","direction","paddingTop","RouterLink","to","subreddit","subreddit_name_prefixed","Typography","author","created_utc","id","title","is_video","autoPlay","controls","reddit_video","fallback_url","type","post_hint","CardMedia","component","poll_data","is_gallery","gallery_data","items","Gallery","map","item","media_id","is_self","selftext","Link","href","rel","target","thumbnail","link","Tooltip","placement","IconButton","handleCopyLink","postURL","navigator","clipboard","writeText","catch","error","console","size","marginLeft","ShareOutlinedIcon","isFetching","onRetry","errorMessage","fetchBaseQueryError","_message","status","message","parseErrorMessage","left","top","CircularProgress","variant","position","Button","_Fragment","BasicList","List","ListItem","disablePadding","ListItemButton","ListItemIcon","Avatar","ListItemText","AboutSubreddit","useParams","data","refetch","useGetAuthorInfoQuery","authorData","WithLoading","Paper","elevation","Divider","icon_img","name","flexWrap","StarBorderOutlinedIcon","total_karma","CakeOutlinedIcon","AuthorPage","useGetPostsByAuthorQuery","borderLeft","noPostsContainer","mainContaner","postMainContaner","boxShadow","postWrapper","vote","postFooter","aboutAutorContaner","userData","AboutAuthor","SpeakerNotesOffOutlinedIcon","score","PostContent","ButtonGroup","ModeCommentOutlinedIcon","num_comments","ShareButton","permalink","TopLink","label","icon","css","NavLink","isActive","startIcon","paper","secondary","Navigation","p","m","StarBorderIcon","LocalFireDepartmentOutlinedIcon","AutorenewOutlinedIcon","_data$data","_data$data$children","useGetPostsBySubredditQuery","flexItem","orientation","Home","useLocation","pathname","slice","Posts","bottom","zIndex","useGetSubredditQuery","subredditData","display_name_prefixed","public_description","subscribers","accounts_active","Comments","_data$","_data$$data","_data$$data$children","_data$2","_data$2$data","_data$2$data$children","useGetCommentsQuery","noCommentsContainer","timeAgoTypography","commentTopAndBottomContaner","commentContaner","commentBody","comment","body","VerticalAlignTopOutlinedIcon","Post","_data$data$children$","useGetPostByIdQuery","SearchBar","searchTerm","setSearchTerm","navigate","useNavigate","location","handleSearch","useEffect","pathSubreddit","split","TextField","InputProps","startAdornment","SearchIcon","endAdornment","handleClear","ClearIcon","fullWidth","onChange","e","onKeyDown","key","Subreddit","headerContaner","subredditContaner","dataInfo","drawerWidth","App","setOpen","React","logoTypography","drawer","flexShrink","openDrawerButton","CssBaseline","Toolbar","logo","noWrap","Search","edge","handleDrawerOpen","MenuIcon","Suspense","fallback","Routes","Route","element","path","Navigate","replace","ErrorPage","Drawer","anchor","handleDrawerClose","ChevronLeftIcon","ChevronRightIcon","ThemeSwitcher"],"sourceRoot":""}